def positive_y(bb1, bb, sub_assemblies):
    pos = True
    for k in range(math.floor(bb1[5])+5, math.ceil(bb1[4])):
        for j in range(math.floor(bb1[3]), math.ceil(bb[2]), 1):
            p1 = gp_Pnt(math.floor(bb1[0]), j, k)
            line_dir = gp_Dir(-math.floor(bb1[0]), j, k)
            my_line = Geom_Line(p1, line_dir).Lin()
            inter = intersect_shape_by_line(sub_assemblies[3], my_line)
            if (inter != "no intersection"):
                pos = False
                break
        if (pos == False):
            break
    if (pos):
        print(bcolors.OKGREEN + "possible in " + bcolors.OKCYAN +
              "positive y " + bcolors.OKGREEN + "direction" + bcolors.ENDC)
    else:
        print(bcolors.FAIL + "not possible in " + bcolors.OKCYAN +
              "positive y " + bcolors.FAIL + "direction" + bcolors.ENDC)
    return pos


def negative_y(bb1, bb, sub_assemblies):
    pos = True
    for k in range(math.floor(bb1[5])+5, math.ceil(bb1[4])):
        for j in range(math.floor(bb1[2]), math.ceil(bb[3]), -1):
            p1 = gp_Pnt(math.floor(bb1[0]), j, k)
            line_dir = gp_Dir(-math.floor(bb1[0]), j, k)
            my_line = Geom_Line(p1, line_dir).Lin()
            inter = intersect_shape_by_line(sub_assemblies[3], my_line)
            if (inter != "no intersection"):
                pos = False
                break
        if (pos == False):
            break
    if (pos):
        print(bcolors.OKGREEN + "possible in " + bcolors.OKCYAN +
              "negative y " + bcolors.OKGREEN + "direction" + bcolors.ENDC)
    else:
        print(bcolors.FAIL + "not possible in " + bcolors.OKCYAN +
              "negative y " + bcolors.FAIL + "direction" + bcolors.ENDC)

    return pos
